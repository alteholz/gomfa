package gomfa

import (
	"testing"
)

func BenchmarkRv2m(b *testing.B) {
	var r [3][3]float64
	var w [3]float64

	w[0] = 0.0
	w[1] = 1.41371669
	w[2] = -1.88495559

	for i := 0; i < 100000000; i++ {
		Rv2m(&w, &r)
	}
}

func TestRv2m(t *testing.T) {
	var r [3][3]float64
	var w [3]float64

	w[0] = 0.0
	w[1] = 1.41371669
	w[2] = -1.88495559

	Rv2m(&w, &r)

	if !CheckFloat(r[0][0], -0.7071067782221119905, 1e-14) {
		t.Errorf("r[0][0] != -0.7071067782221119905\n")
	}
	if !CheckFloat(r[0][1], -0.5656854276809129651, 1e-14) {
		t.Errorf("r[0][1] != -0.5656854276809129651\n")
	}
	if !CheckFloat(r[0][2], -0.4242640700104211225, 1e-14) {
		t.Errorf("r[0][2] != -0.4242640700104211225\n")
	}
	if !CheckFloat(r[1][0], 0.5656854276809129651, 1e-14) {
		t.Errorf("r[1][0] != 0.5656854276809129651\n")
	}
	if !CheckFloat(r[1][1], -0.0925483394532274246, 1e-14) {
		t.Errorf("r[1][1] != -0.0925483394532274246\n")
	}
	if !CheckFloat(r[1][2], -0.8194112531408833269, 1e-14) {
		t.Errorf("r[1][2] != -0.8194112531408833269\n")
	}
	if !CheckFloat(r[2][0], 0.4242640700104211225, 1e-14) {
		t.Errorf("r[2][0] != 0.4242640700104211225\n")
	}
	if !CheckFloat(r[2][1], -0.8194112531408833269, 1e-14) {
		t.Errorf("r[2][1] != -0.8194112531408833269\n")
	}
	if !CheckFloat(r[2][2], 0.3854415612311154341, 1e-14) {
		t.Errorf("r[2][2] != 0.3854415612311154341\n")
	}
}
